
import React, { useState, useEffect } from 'react';
import { Mic, MicOff, Volume2, Menu, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import LanguageSelector from './LanguageSelector';
import VoiceIndicator from './VoiceIndicator';

interface HeaderProps {
  currentLanguage: string;
  onLanguageChange: (language: string) => void;
}

const Header = ({ currentLanguage, onLanguageChange }: HeaderProps) => {
  const [isVoiceActive, setIsVoiceActive] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);

  const languages = [
    { name: 'English', code: 'en-US', flag: 'üá∫üá∏' },
    { name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', code: 'hi-IN', flag: 'üáÆüá≥' },
    { name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', code: 'bn-IN', flag: 'üáßüá©' },
    { name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', code: 'te-IN', flag: 'üáÆüá≥' },
    { name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', code: 'mr-IN', flag: 'üáÆüá≥' },
    { name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', code: 'ta-IN', flag: 'üáÆüá≥' },
    { name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', code: 'gu-IN', flag: 'üáÆüá≥' },
    { name: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', code: 'kn-IN', flag: 'üáÆüá≥' },
    { name: '‡¨ì‡¨°‡¨ø‡¨Ü', code: 'or-IN', flag: 'üáÆüá≥' },
    { name: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç', code: 'ml-IN', flag: 'üáÆüá≥' },
    { name: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä', code: 'pa-IN', flag: 'üáÆüá≥' },
    { name: '‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ', code: 'as-IN', flag: 'üáÆüá≥' }
  ];

  // Content translations
  const translations = {
    'English': {
      features: 'Features',
      community: 'Community',
      about: 'About',
      voiceOn: 'Voice On',
      voiceOff: 'Voice Off',
      voiceActivated: 'Voice navigation activated. Say help for available commands.',
      voiceDeactivated: 'Voice navigation deactivated',
      menuOpened: 'Menu opened',
      navigatingToFeatures: 'Navigating to features',
      navigatingToCommunity: 'Navigating to community',
      helpMessage: 'Available commands: say menu, features, community, or start learning',
      languageChanged: 'Language changed to',
      voiceActiveMessage: 'Voice navigation active. Say "Help" for commands or "Menu" for navigation.'
    },
    '‡§π‡§ø‡§Ç‡§¶‡•Ä': {
      features: '‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç',
      community: '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø',
      about: '‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç',
      voiceOn: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç',
      voiceOff: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§Ç‡§¶',
      voiceActivated: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø‡•§ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§π‡•á‡§Ç‡•§',
      voiceDeactivated: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø',
      menuOpened: '‡§Æ‡•á‡§®‡•Ç ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ',
      navigatingToFeatures: '‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§ì‡§Ç ‡§™‡§∞ ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
      navigatingToCommunity: '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§™‡§∞ ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
      helpMessage: '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ï‡§Æ‡§æ‡§Ç‡§°: ‡§Æ‡•á‡§®‡•Ç, ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç, ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø, ‡§Ø‡§æ ‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§π‡•á‡§Ç',
      languageChanged: '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§ó‡§à',
      voiceActiveMessage: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø‡•§ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ" ‡§Ø‡§æ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è "‡§Æ‡•á‡§®‡•Ç" ‡§ï‡§π‡•á‡§Ç‡•§'
    },
    '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ': {
      features: '‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø',
      community: '‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶Ø‡¶º',
      about: '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá',
      voiceOn: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ö‡¶æ‡¶≤‡ßÅ',
      voiceOff: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß',
      voiceActivated: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡•§ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¨‡¶≤‡ßÅ‡¶®‡•§',
      voiceDeactivated: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º',
      menuOpened: '‡¶Æ‡ßá‡¶®‡ßÅ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
      navigatingToFeatures: '‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡¶ø',
      navigatingToCommunity: '‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡¶ø',
      helpMessage: '‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: ‡¶Æ‡ßá‡¶®‡ßÅ, ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø, ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶Ø‡¶º, ‡¶¨‡¶æ ‡¶∂‡ßá‡¶ñ‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶¨‡¶≤‡ßÅ‡¶®',
      languageChanged: '‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
      voiceActiveMessage: '‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡•§ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø "‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø" ‡¶¨‡¶æ ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø "‡¶Æ‡ßá‡¶®‡ßÅ" ‡¶¨‡¶≤‡ßÅ‡¶®‡•§'
    }
  };

  const getCurrentTranslation = () => {
    return translations[currentLanguage as keyof typeof translations] || translations['English'];
  };

  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      recognitionInstance.continuous = true;
      recognitionInstance.interimResults = true;
      
      const currentLang = languages.find(lang => lang.name === currentLanguage);
      recognitionInstance.lang = currentLang?.code || 'en-US';

      recognitionInstance.onstart = () => {
        setIsListening(true);
      };

      recognitionInstance.onend = () => {
        setIsListening(false);
      };

      recognitionInstance.onresult = (event) => {
        const transcript = event.results[event.results.length - 1][0].transcript;
        console.log('Voice command:', transcript);
        handleVoiceCommand(transcript.toLowerCase());
      };

      setRecognition(recognitionInstance);
    }
  }, [currentLanguage]);

  const handleVoiceCommand = (command: string) => {
    const t = getCurrentTranslation();
    if (command.includes('menu') || command.includes('navigation')) {
      setIsMobileMenuOpen(true);
      speak(t.menuOpened);
    } else if (command.includes('features')) {
      document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' });
      speak(t.navigatingToFeatures);
    } else if (command.includes('community')) {
      document.getElementById('community')?.scrollIntoView({ behavior: 'smooth' });
      speak(t.navigatingToCommunity);
    } else if (command.includes('help')) {
      speak(t.helpMessage);
    }
  };

  const speak = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      const currentLang = languages.find(lang => lang.name === currentLanguage);
      utterance.lang = currentLang?.code || 'en-US';
      speechSynthesis.speak(utterance);
    }
  };

  const toggleVoice = () => {
    const t = getCurrentTranslation();
    if (!recognition) {
      alert('Speech recognition not supported in this browser');
      return;
    }

    if (isVoiceActive) {
      recognition.stop();
      setIsVoiceActive(false);
      speak(t.voiceDeactivated);
    } else {
      recognition.start();
      setIsVoiceActive(true);
      speak(t.voiceActivated);
    }
  };

  const changeLanguage = (langName: string) => {
    onLanguageChange(langName);
    const selectedLang = languages.find(lang => lang.name === langName);
    if (recognition && selectedLang) {
      recognition.lang = selectedLang.code;
    }
    const t = translations[langName as keyof typeof translations] || translations['English'];
    speak(`${t.languageChanged} ${langName}`);
  };

  const t = getCurrentTranslation();

  return (
    <>
      <header className="bg-white shadow-lg border-b-4 border-blue-400 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg font-playfair">V</span>
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900 font-playfair">VidyaVriksha</h1>
                <p className="text-xs text-gray-500 hidden sm:block font-inter">‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ ‡§µ‡•É‡§ï‡•ç‡§∑</p>
              </div>
            </div>

            {/* Desktop Navigation */}
            <nav className="hidden md:flex items-center space-x-6">
              <a href="#features" className="text-gray-700 hover:text-blue-600 font-medium transition-colors font-inter">
                {t.features}
              </a>
              <a href="#community" className="text-gray-700 hover:text-blue-600 font-medium transition-colors font-inter">
                {t.community}
              </a>
              <a href="#about" className="text-gray-700 hover:text-blue-600 font-medium transition-colors font-inter">
                {t.about}
              </a>
            </nav>

            {/* Voice & Language Controls */}
            <div className="flex items-center space-x-3">
              <LanguageSelector 
                currentLanguage={currentLanguage}
                onLanguageChange={changeLanguage}
                languages={languages}
              />

              {/* Voice Toggle */}
              <Button
                onClick={toggleVoice}
                variant={isVoiceActive ? "default" : "outline"}
                size="sm"
                className={`flex items-center space-x-1 font-inter ${
                  isVoiceActive 
                    ? 'bg-blue-500 hover:bg-blue-600 text-white' 
                    : 'hover:bg-blue-50'
                }`}
              >
                {isListening ? (
                  <div className="w-4 h-4 bg-red-500 rounded-full animate-pulse" />
                ) : isVoiceActive ? (
                  <Mic className="w-4 h-4" />
                ) : (
                  <MicOff className="w-4 h-4" />
                )}
                <Volume2 className="w-4 h-4" />
                <span className="hidden sm:block">
                  {isVoiceActive ? t.voiceOn : t.voiceOff}
                </span>
              </Button>

              {/* Mobile Menu Toggle */}
              <Button
                variant="outline"
                size="sm"
                className="md:hidden"
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              >
                {isMobileMenuOpen ? <X className="w-4 h-4" /> : <Menu className="w-4 h-4" />}
              </Button>
            </div>
          </div>

          {/* Mobile Menu */}
          {isMobileMenuOpen && (
            <div className="md:hidden border-t border-gray-200 py-4">
              <nav className="flex flex-col space-y-3">
                <a 
                  href="#features" 
                  className="text-gray-700 hover:text-blue-600 font-medium transition-colors font-inter"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  {t.features}
                </a>
                <a 
                  href="#community" 
                  className="text-gray-700 hover:text-blue-600 font-medium transition-colors font-inter"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  {t.community}
                </a>
                <a 
                  href="#about" 
                  className="text-gray-700 hover:text-blue-600 font-medium transition-colors font-inter"
                  onClick={() => setIsMobileMenuOpen(false)}
                >
                  {t.about}
                </a>
              </nav>
            </div>
          )}

          {/* Voice Status Indicator */}
          {isVoiceActive && (
            <div className="bg-blue-100 border-l-4 border-blue-500 p-3 mb-0">
              <div className="flex items-center">
                <div className="flex">
                  <Mic className="w-5 h-5 text-blue-500 mr-2" />
                </div>
                <div>
                  <p className="text-sm text-blue-700 font-inter">
                    {t.voiceActiveMessage.replace('{language}', currentLanguage)}
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </header>

      <VoiceIndicator 
        isVoiceActive={isVoiceActive}
        isListening={isListening}
        currentLanguage={currentLanguage}
      />
    </>
  );
};

export default Header;
